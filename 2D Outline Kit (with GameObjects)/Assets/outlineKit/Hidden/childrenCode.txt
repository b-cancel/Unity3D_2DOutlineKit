//----------inside of every property that we want our children to copy [ALREADY DONE]

//REGULAR outline all variables (9)
    //--- Optimization
    -UpdateSprite
    //----- Debugging
    -ShowOutline_GOs_InHierarchy_D
    //--- Sprite Overlay
    -Active_SO
    -OrderInLayer_SO
    -Color_SO
    //--- Clipping Mask
    -AlphaCutoff_CM
    -CustomRange_CM
    -FrontLayer_CM
    -BackLayer_CM

//conVEX outline all variables (7)
    //---Clipping Mask Vars
    -ClipCenter_CM
    //---Outline Vars
    -Active_O
    -Color_O
    -OrderInLayer_O
    -Size_O
    -ScaleWithParentX_O
    -ScaleWithParentY_O

//conCAVE outline all variables (15)
    //---Clipping Mask Vars
    -ClipCenter_CM
    //---Outline Vars
    -Active_O
    -Color_O
    -OrderInLayer_O
    -ScaleWithParentX_O
    -ScaleWithParentY_O
    //-----Push Type Vars
    -PushType_OP
    -StdSize_OP
    -Size_OP
    //---Regular
    -EdgeCount_OPR
    -StartAngle_OPR
    -PushPattern_OPR
    -RectSize_OPRS
	-RectWidth_OPRS
	-RectHeight_OPRS

//MAX VARS per outline (9) + (15) = 24
//we need to know which ones we want to pass... to our children [use another variable... DO WE PASS THIS ONE?]

//----------only in class(we can only have 1 parent... but many children...)

[Header("Family Relationships")]
public GameObject parentGO;
GameObject prevParentGO;

public List<GameObject> children;

//----------REQUIRE HEAVY MODIFICATION

BECAUSE sizes of every outline type are very different

we might want to pass over our size without modifications -OR- 
or modify the size so our outline has the same distance from our source sprite regardless of outline type

we also might want to retain our porportion with our parent or not

//---------------in the awake function

//DESCRIP: Make sure our parent is not our child

children = new List<GameObject>();
if (parentGOWithScript != null && children.Contains(parentGOWithScript) == false)
{
    if (parentGOWithScript.GetComponent<concaveOutlineV3>() != null)
    {
        if (parentGOWithScript.GetComponent<concaveOutlineV3>().children.Contains(this.gameObject) == false)
            parentGOWithScript.GetComponent<concaveOutlineV3>().children.Add(this.gameObject);
    }
    else if (parentGOWithScript.GetComponent<convexOutlineV3>() != null)
    {
        if (parentGOWithScript.GetComponent<convexOutlineV3>().children.Contains(this.gameObject) == false)
            parentGOWithScript.GetComponent<convexOutlineV3>().children.Add(this.gameObject);
    }
}
else
    parentGOWithScript = null;

//---------------in the update function

//NOTE: previously we always made sure our children where still our children... now we only do that when we update our children with out new variables... because it frankly makes no difference

//---parent child relationship

//DESCRIP: handle chaing parents

if (parentGOWithScript != prevParentGOWithScript) 
{
    //TODO... reconfigure to work with any of our 6 scripts
    if (prevParentGOWithScript != null) //If we had a parent... break all ties with them
    {
        if (parentGOWithScript.GetComponent<convexOutlineV3>() != null)
        {
            if (prevParentGOWithScript.GetComponent<convexOutlineV3>().children.Contains(this.gameObject) == true)
                prevParentGOWithScript.GetComponent<convexOutlineV3>().children.Remove(this.gameObject);
        }
        else if (parentGOWithScript.GetComponent<concaveOutlineV3>() != null)
        {
            if (prevParentGOWithScript.GetComponent<concaveOutlineV3>().children.Contains(this.gameObject) == true)
                prevParentGOWithScript.GetComponent<concaveOutlineV3>().children.Remove(this.gameObject);
        }
    }

    //make ties with new parent
    if (parentGOWithScript != null && children.Contains(parentGOWithScript) == false) //if someone wants to be our parent... and they are not already our child...
    {
        if (parentGOWithScript.GetComponent<concaveOutlineV3>() != null)
        {
            if (parentGOWithScript.GetComponent<concaveOutlineV3>().children.Contains(this.gameObject) == false)
            {
                parentGOWithScript.GetComponent<concaveOutlineV3>().children.Add(this.gameObject);
                parentGOWithScript.GetComponent<concaveOutlineV3>().updateUniversalVars();
            }

        }
        else if (parentGOWithScript.GetComponent<convexOutlineV3>() != null)
        {
            if (parentGOWithScript.GetComponent<convexOutlineV3>().children.Contains(this.gameObject) == false)
            {
                parentGOWithScript.GetComponent<convexOutlineV3>().children.Add(this.gameObject);
                parentGOWithScript.GetComponent<convexOutlineV3>().updateUniversalVars();
            }

        }
    }
    else
        parentGOWithScript = null;
}
prevParentGOWithScript = parentGOWithScript;